// protocol has been generated from message format json - DO NOT EDIT
package protocol

import uuid "github.com/google/uuid"

// Assignor contains a null if not used or if it didn't change since the last heartbeat; the list of client-side assignors otherwise.
type Assignor struct {
	// Version defines the protocol version to use for encode and decode
	Version int16
	// Name contains the name of the assignor.
	Name string
	// MinimumVersion contains the minimum supported version for the metadata.
	MinimumVersion int16
	// MaximumVersion contains the maximum supported version for the metadata.
	MaximumVersion int16
	// Reason contains the reason of the metadata update.
	Reason int8
	// MetadataVersion contains the version of the metadata.
	MetadataVersion int16
	// MetadataBytes contains the metadata.
	MetadataBytes []byte
}

func (c *Assignor) encode(pe packetEncoder, version int16) (err error) {
	c.Version = version
	if err := pe.putString(c.Name); err != nil {
		return err
	}

	pe.putInt16(c.MinimumVersion)

	pe.putInt16(c.MaximumVersion)

	pe.putInt8(c.Reason)

	pe.putInt16(c.MetadataVersion)

	if err := pe.putBytes(c.MetadataBytes); err != nil {
		return err
	}

	pe.putUVarint(0)
	return nil
}

func (c *Assignor) decode(pd packetDecoder, version int16) (err error) {
	c.Version = version
	if c.Name, err = pd.getString(); err != nil {
		return err
	}

	if c.MinimumVersion, err = pd.getInt16(); err != nil {
		return err
	}

	if c.MaximumVersion, err = pd.getInt16(); err != nil {
		return err
	}

	if c.Reason, err = pd.getInt8(); err != nil {
		return err
	}

	if c.MetadataVersion, err = pd.getInt16(); err != nil {
		return err
	}

	if c.MetadataBytes, err = pd.getBytes(); err != nil {
		return err
	}

	if _, err = pd.getEmptyTaggedFieldArray(); err != nil {
		return err
	}
	return nil
}

// TopicPartitions_ConsumerGroupHeartbeatRequest contains a null if it didn't change since the last heartbeat; the partitions owned by the member.
type TopicPartitions_ConsumerGroupHeartbeatRequest struct {
	// Version defines the protocol version to use for encode and decode
	Version int16
	// TopicID contains the topic ID.
	TopicID uuid.UUID
	// Partitions contains the partitions.
	Partitions []int32
}

func (t *TopicPartitions_ConsumerGroupHeartbeatRequest) encode(pe packetEncoder, version int16) (err error) {
	t.Version = version
	if err := pe.putUUID(t.TopicID); err != nil {
		return err
	}

	if err := pe.putInt32Array(t.Partitions); err != nil {
		return err
	}

	pe.putUVarint(0)
	return nil
}

func (t *TopicPartitions_ConsumerGroupHeartbeatRequest) decode(pd packetDecoder, version int16) (err error) {
	t.Version = version
	if t.TopicID, err = pd.getUUID(); err != nil {
		return err
	}

	if t.Partitions, err = pd.getInt32Array(); err != nil {
		return err
	}

	if _, err = pd.getEmptyTaggedFieldArray(); err != nil {
		return err
	}
	return nil
}

type ConsumerGroupHeartbeatRequest struct {
	// Version defines the protocol version to use for encode and decode
	Version int16
	// GroupID contains the group identifier.
	GroupID string
	// MemberID contains the member id generated by the coordinator. The member id must be kept during the entire lifetime of the member.
	MemberID string
	// MemberEpoch contains the current member epoch; 0 to join the group; -1 to leave the group; -2 to indicate that the static member will rejoin.
	MemberEpoch int32
	// InstanceID contains a null if not provided or if it didn't change since the last heartbeat; the instance Id otherwise.
	InstanceID *string
	// RackID contains a null if not provided or if it didn't change since the last heartbeat; the rack ID of consumer otherwise.
	RackID *string
	// RebalanceTimeoutMs contains a -1 if it didn't chance since the last heartbeat; the maximum time in milliseconds that the coordinator will wait on the member to revoke its partitions otherwise.
	RebalanceTimeoutMs int32
	// SubscribedTopicNames contains a null if it didn't change since the last heartbeat; the subscribed topic names otherwise.
	SubscribedTopicNames []string
	// SubscribedTopicRegex contains a null if it didn't change since the last heartbeat; the subscribed topic regex otherwise
	SubscribedTopicRegex *string
	// ServerAssignor contains a null if not used or if it didn't change since the last heartbeat; the server side assignor to use otherwise.
	ServerAssignor *string
	// ClientAssignors contains a null if not used or if it didn't change since the last heartbeat; the list of client-side assignors otherwise.
	ClientAssignors []Assignor
	// TopicPartitions contains a null if it didn't change since the last heartbeat; the partitions owned by the member.
	TopicPartitions []TopicPartitions_ConsumerGroupHeartbeatRequest
}

func (r *ConsumerGroupHeartbeatRequest) encode(pe packetEncoder) (err error) {
	pe = FlexibleEncoderFrom(pe)
	if err := pe.putString(r.GroupID); err != nil {
		return err
	}

	if err := pe.putString(r.MemberID); err != nil {
		return err
	}

	pe.putInt32(r.MemberEpoch)

	if err := pe.putNullableString(r.InstanceID); err != nil {
		return err
	}

	if err := pe.putNullableString(r.RackID); err != nil {
		return err
	}

	pe.putInt32(r.RebalanceTimeoutMs)

	if err := pe.putStringArray(r.SubscribedTopicNames); err != nil {
		return err
	}

	if err := pe.putNullableString(r.SubscribedTopicRegex); err != nil {
		return err
	}

	if err := pe.putNullableString(r.ServerAssignor); err != nil {
		return err
	}

	if err := pe.putArrayLength(len(r.ClientAssignors)); err != nil {
		return err
	}
	for _, block := range r.ClientAssignors {
		if err := block.encode(pe, r.Version); err != nil {
			return err
		}
	}

	if err := pe.putArrayLength(len(r.TopicPartitions)); err != nil {
		return err
	}
	for _, block := range r.TopicPartitions {
		if err := block.encode(pe, r.Version); err != nil {
			return err
		}
	}

	pe.putUVarint(0)
	return nil
}

func (r *ConsumerGroupHeartbeatRequest) decode(pd packetDecoder, version int16) (err error) {
	r.Version = version
	pd = FlexibleDecoderFrom(pd)
	if r.GroupID, err = pd.getString(); err != nil {
		return err
	}

	if r.MemberID, err = pd.getString(); err != nil {
		return err
	}

	if r.MemberEpoch, err = pd.getInt32(); err != nil {
		return err
	}

	if r.InstanceID, err = pd.getNullableString(); err != nil {
		return err
	}

	if r.RackID, err = pd.getNullableString(); err != nil {
		return err
	}

	if r.RebalanceTimeoutMs, err = pd.getInt32(); err != nil {
		return err
	}

	if r.SubscribedTopicNames, err = pd.getStringArray(); err != nil {
		return err
	}

	if r.SubscribedTopicRegex, err = pd.getNullableString(); err != nil {
		return err
	}

	if r.ServerAssignor, err = pd.getNullableString(); err != nil {
		return err
	}

	var numClientAssignors int
	if numClientAssignors, err = pd.getArrayLength(); err != nil {
		return err
	}
	if numClientAssignors > 0 {
		r.ClientAssignors = make([]Assignor, numClientAssignors)
		for i := 0; i < numClientAssignors; i++ {
			var block Assignor
			if err := block.decode(pd, r.Version); err != nil {
				return err
			}
			r.ClientAssignors[i] = block
		}
	}

	var numTopicPartitions int
	if numTopicPartitions, err = pd.getArrayLength(); err != nil {
		return err
	}
	if numTopicPartitions > 0 {
		r.TopicPartitions = make([]TopicPartitions_ConsumerGroupHeartbeatRequest, numTopicPartitions)
		for i := 0; i < numTopicPartitions; i++ {
			var block TopicPartitions_ConsumerGroupHeartbeatRequest
			if err := block.decode(pd, r.Version); err != nil {
				return err
			}
			r.TopicPartitions[i] = block
		}
	}

	if _, err = pd.getEmptyTaggedFieldArray(); err != nil {
		return err
	}
	return nil
}

func (r *ConsumerGroupHeartbeatRequest) GetKey() int16 {
	return 68
}

func (r *ConsumerGroupHeartbeatRequest) GetVersion() int16 {
	return r.Version
}

func (r *ConsumerGroupHeartbeatRequest) GetHeaderVersion() int16 {
	return 2
}

func (r *ConsumerGroupHeartbeatRequest) IsValidVersion() bool {
	return r.Version == 0
}

func (r *ConsumerGroupHeartbeatRequest) GetRequiredVersion() int16 {
	// TODO - it isn't possible to determine this from the message format json files
	return 0
}
